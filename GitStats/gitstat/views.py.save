# External Libraries
import PyGithub as gthb
import pandas as pd

# Django imports
from django.shortcuts import render, render_to_response
from django.http import HttpResponse
from django.template import RequestContext

# Plotly
import plotly.plotly as py
from plotly.graph_objs import *

def homepage():
  pass


# Plot 1 url: /bargraph/
def users_region_language_plot(request):
   """
   Creates a plot for number of users in a particular region
   for a particular language, and returns an iframe of the graph
   plotted for the same, plotted using plotly. 
   It is a vertical bar graph.
   """
   languages = ['python','dotnet','javascript','scala','java']

   if request.method == "POST":
       gt = gthb.Github()       
       city1 = request.POST["city1"]
       city2 = request.POST["city1"]
       counts1 = []
       counts2 = []
       for lang in languages:
           counts1.append( _number_of_users(gt, location=city1,language=lang))
           counts2.append(_number_of_users(gt, location=city2,language=lang))
       
       trace1 = Bar(x=languages, y = counts1, name=city1)
       trace2 = Bar(x=languages, y = counts2, name=city2)
       data = Data([trace1, trace2])       
       layout = Layout(barmode='group')
       fig = Figure(data=data, layout=layout)

       plot_url = py.plot(fig, file_name='barchart')
       embed_url = plot_url + ".embed?height=600&width=600"

       iframe = '<iframe src=\"{embed_url}\" ></iframe>'.format(embed_url=embed_url)
       return HttpResponse(iframe)

# Plot 2 url: /piechart/
def region_language_plot(request):
   """
   Creates a pie chart of popularity of languages in a region
   and returns an iframe of the graph
   plotted for the same, plotted using plotly.
   """
   if request.method == "POST":
       
       iframe = '<iframe></iframe>'
       return HttpResponse(iframe)


# Plot 3 TOTHINK
# Plot 4 TOTHINK
   
def _number_of_users(gthb_object, location="Gurgaon", language="Python"):
   """
   Search for users for a particular language in a particular region.
   Returns count for the same
   """
   query="location: {_location} language:{_language}".format(_location=location, _language=language)
   result = gthb_object.users_search(query)
   return result.totalCount



